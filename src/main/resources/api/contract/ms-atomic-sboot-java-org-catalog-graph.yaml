openapi: 3.0.3
info:
  title: System Acronym Registry
  version: v1
servers:
  - url: https://system-acronym.des.jstack.com.br
    description: DES
  - url: https://system-acronym.uat.jstack.com.br
    description: UAT
  - url: https://system-acronym.jstack.com.br
    description: PRD
security:
  - bearerAuth: [ ]
tags:
  - name: TenantCompany
  - name: BusinessDomain
paths:
  /v1/tenant-companies:
    get:
      tags: [ TenantCompany ]
      summary: List Tenants
      operationId: listTenants
      responses:
        '200':
          description: List of tenants (may be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TenantCompanyResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [ TenantCompany ]
      summary: Create a tenant
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCompanyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantCompanyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/tenant-companies/{tenantId}:
    get:
      tags: [ TenantCompany ]
      summary: Get Tenant by ID
      operationId: retrieveTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tenant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantCompanyResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [ TenantCompany ]
      summary: Update tenant
      operationId: updateTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCompanyRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantCompanyResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [ TenantCompany ]
      summary: Delete Tenant
      operationId: deleteTenant
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/business-domains:
    get:
      tags: [ BusinessDomain ]
      summary: List business domains
      operationId: listBusinessDomains
      responses:
        '200':
          description: List (may be empty)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BusinessDomainResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [ BusinessDomain ]
      summary: Create business domain
      operationId: createBusinessDomain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessDomainRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessDomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/business-domains/{canonicalId}:
    get:
      tags: [ BusinessDomain ]
      summary: Get business domain by id
      operationId: retrieveBusinessDomain
      parameters:
        - name: canonicalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Business domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessDomainResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [ BusinessDomain ]
      summary: Update business domain
      operationId: updateBusinessDomain
      parameters:
        - name: canonicalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessDomainRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessDomainResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [ BusinessDomain ]
      summary: Delete business domain
      operationId: deleteBusinessDomain
      parameters:
        - name: canonicalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    TenantCompanyRequest:
      type: object
      required: [ tenantId, name ]
      properties:
        tenantId:
          type: string
          x-field-extra-annotation: |
            @jakarta.validation.constraints.Size(min=2, max=10, message="{br.com.jstack.request.tenant.size}")
        name:
          type: string
          x-field-extra-annotation: |
            @jakarta.validation.constraints.Size(min=2, max=30, message="{br.com.jstack.request.tenant.size}")
        status:
          type: string
          enum: [ ACTIVE, INACTIVE, DEPRECATED ]
#          x-field-extra-annotation: |
#            @jakarta.validation.constraints.NotNull(message="{br.com.jstack.request.tenant.status.notnull}")

    TenantCompanyResponse:
      allOf:
        - $ref: '#/components/schemas/TenantCompanyRequest'
        - type: object
          properties:
            audit:
              $ref: '#/components/schemas/Audit'

    BusinessDomainRequest:
      type: object
      required: [ tenantId, acronym, name, status, canonicalId ]
      properties:
        canonicalId:
          type: string
          description: "Canonical identifier of the domain. Format: domain:<tenantId>/<acronym> (e.g., domain:rd/FINANCE)"
          example: "domain:rd/fina"
          x-field-extra-annotation: |
            @jakarta.validation.constraints.NotBlank(message="{br.com.jstack.request.domain.canonicalid.notblank}")
            @jakarta.validation.constraints.Pattern(
              regexp="^domain:[a-z0-9-]{2,10}/[a-z0-9-]{5,30}$",
              message="{br.com.jstack.request.domain.canonicalid.pattern}"
            )
        tenantId:
          type: string
          description: "Tenant identifier (2–10 lowercase alphanumeric characters, e.g., rd, ford, vivo)"
          example: "rd"
          x-field-extra-annotation: |
            @jakarta.validation.constraints.NotBlank(message="{br.com.jstack.request.domain.tenantId.notblank}")
            @jakarta.validation.constraints.Pattern(
              regexp="^[a-z0-9-]{2,10}$",
              message="{br.com.jstack.request.domain.tenantId.pattern}"
            )
        acronym:
          type: string
          description: "Domain acronym (4–lowercase letters)"
          example: "finc"
          x-field-extra-annotation: |
            @jakarta.validation.constraints.NotBlank(message="{br.com.jstack.request.domain.acronym.notblank}")
            @jakarta.validation.constraints.Pattern(
              regexp="^[a-z]{4}$",
              message="{br.com.jstack.request.domain.acronym.pattern}"
            )
        name:
          type: string
          description: "Full domain name (5–30 characters)"
          example: "Financial Services"
          x-field-extra-annotation: |
            @jakarta.validation.constraints.Size(min=5, max=30, message="{br.com.jstack.request.domain.name.size}")
        description:
          type: string
          description: "Detailed description of the domain (5–255 characters)"
          example: "Domain responsible for all financial and accounting operations."
          x-field-extra-annotation: |
            @jakarta.validation.constraints.Size(min=5, max=255, message="{br.com.jstack.request.domain.description.size}")
        status:
          type: string
          description: "Domain status (allowed values: ACTIVE, DEPRECATED, INACTIVE)"
          example: "ACTIVE"
          x-field-extra-annotation: |
            @jakarta.validation.constraints.NotBlank(message="{br.com.jstack.request.domain.status.notblank}")
            @jakarta.validation.constraints.Pattern(
              regexp="^(ACTIVE|DEPRECATED|INACTIVE)$",
              message="{br.com.jstack.request.domain.status.pattern}"
            )
        rejectionReason:
          type: string

    BusinessDomainResponse:
      type: object
      properties:
        canonicalId:
          type: string
          description: "Canonical identifier of the domain. Format: domain:<tenantId>/<acronym>"
          example: "domain:rd/FINANCE"
        tenantId:
          type: string
          description: "Tenant identifier (e.g., rd, ford, vivo, bva)"
          example: "ford"
        acronym:
          type: string
          description: "Domain acronym (4–10 uppercase letters)"
          example: "FINANCE"
        name:
          type: string
          description: "Full domain name"
          example: "Financial Services"
        description:
          type: string
          description: "Detailed description of the domain"
          example: "Domain responsible for all financial and accounting operations."
        status:
          type: string
          description: "Domain status (ACTIVE, DEPRECATED, INACTIVE)"
          example: "ACTIVE"
        rejectedBy:
          type: string
        rejectedAt:
          type: string
          format: date-time
        approvedBy:
          type: string
        approvedAt:
          type: string
          format: date-time
        rejectionReason:
          type: string
        audit:
          $ref: '#/components/schemas/Audit'

    Audit:
      type: object
      properties:
        createdBy:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedBy:
          type: string
        updatedAt:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      required: [ timestamp, codeStatus, messageStatus, errors, path ]
      properties:
        timestamp:
          type: string
          format: date-time
          example: '2025-06-25T12:34:56Z'
        codeStatus:
          type: integer
          format: int32
          example: 400
        messageStatus:
          type: string
          example: Invalid input data
        errors:
          type: array
          items:
            type: string
          example:
            - "name: must not be blank"
            - "status: must be one of [ACTIVE, INACTIVE, DEPRECATED]"
        path:
          type: string
          example: /v1/tenant-companies